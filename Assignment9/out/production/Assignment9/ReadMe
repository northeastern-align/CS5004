//////// The Easy (Not so easy) Animator  //////////

Example of animation being created (can also be found in the main file):

    IAnimationModel model = new AnimationModel();

    model.addShape("Rectangle1", ShapeType.RECTANGLE, 0, 100, 0, 0, 10,
            10, 200, 100, 200);
    model.addShape("Ellipse1", ShapeType.ELLIPSE, 0, 30, 20, 20, 20, 20,
            100, 200, 100);
    model.addShape("Triangle1", ShapeType.TRIANGLE, 45, 250, 50, 50, 5, 5,
            50, 100, 50);
    model.addShape("Triangle2", ShapeType.TRIANGLE, 0, 0, 100, 100, 15, 15,
            100, 100, 100);

    model.addMoveMotion("Rectangle1", 0, 20, 20, 20);
    model.addMoveMotion("Rectangle1", 41, 60, 5, 5);
    model.addMoveMotion("Rectangle1", 21, 40, 30, 30);
    model.addScaleMotion("Ellipse1", 5, 25, 60, 60);
    model.addScaleMotion("Ellipse1", 4, 5, 100, 100);
    model.addScaleMotion("Ellipse1", 41, 60, 15, 15);
    model.addColorChangeMotion("Triangle1", 50, 90, 200, 200, 200);
    model.addScaleMotion("Rectangle1", 6, 30, 900, 900);

Classes / Interfaces:

IAnimationModel -- An interface for the model, which allows you to create shapes, add animations
to the shapes you create, and get the current state of the animation.

IShape -- An interface for a shape, of which our 3 shape types (Rectangle, Triangle, and Ellipse)
use.

IMotion -- An interface for a motion, of which our 3 motion types (Move, ChangeColor, Scale) use.

IAnimatedShape -- An animated shape is where the shape and the motion are combined, and a new
animated shape is created every time there is a motion, rather than updating the original shape.

AAnimatedShape, AnimatedEllipse, AnimatedRectangle, AnimatedTriangle -- AAnimatedShape is an
abstract class that implements IAnimatedShape. The three classes which extend it only need their
own toString so the rest of the functions and variables are stored in AAnimatedShape. An AAnimated
shape has the time when the shape appears and disappears, and a list of every motion that happens
for that shape.

AMotion, Move, Scale, ChangeColor -- AMotion is an abstract class that implements IMotion. Move
ChangeColor and Scale all have their own constructors which allow the user to create a motion
so long as it meets each one of their specific requirements.  AMotion only stores their
start and end time, and then has as a compareTo function which allows the treemap of IMotions
in the model to be sorted in order of time.

AShape, Rectangle, Triangle, Ellipse -- Similar to AAnimated Shape, AShape is an abstract class
which has almost all of the methods to represent a Shape.  Rectangle, Triangle, and Ellipse
only have a unique toString method and call the super constructor from AShape.

AnimationModel -- This is the model of the easy animator. In order to use it you would
call the addShape function to create a shape, when you do that you give it a shapeType, and ID, it's
initial position and how long it will appear on the screen for.  The user can then add each
type of animation using a specific function for that, and they can get the state of the animation.

ExistingMove -- This is a class that checks if there is an overlapping motion.  For example,
if you try to make add a move motion on Rectangle1 from t=0 to t=5, and then try to make another
move motion on Rectangle1 from t=3 to t=6, when checked against this class it will alert the model
that there is an overlapping move.

MotionType, ShapeType -- Enum classes that represent the 3 available shape types and the 3
available motion types.



